
&НаКлиенте
Процедура ПодобратьБазы(Команда)
	
	ПараметрыФормы = Новый Структура("ВыбратьБазы");
	ОткрытьФорму("Обработка.РабочееМестоАдминистратора.Форма.РабочееМестоАдминистратора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Для каждого СтрокаЗначение из ВыбранноеЗначение цикл
		СписокБазДанных.Добавить(СтрокаЗначение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработчикиОкончаниеПеретаскиванияНаСервере(МассивОбработчиков)

	Для каждого СтрокаОбработчик из МассивОбработчиков цикл
		ИсполняемыйКод.УстановитьТекст(СтрокаОбработчик.КодОбработчика);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикиОкончаниеПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(Команда)
	ВыполнитьАлгоритмНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмНаСервере()
	
	ДвоичныеДанныеОбработки = Справочники.Обработчики.ПолучитьМакет("ОбработкаИсполненияКода");
	ДДОбработкиВBase64 = Base64Строка(ДвоичныеДанныеОбработки);
	ИмяОбработки = "ОбработкаИсполненияКода.epf";
	Для каждого СтрокаБаза из СписокБазДанных цикл
		СтруктураПодключения = РаботаСПодключениямиCOM.ПолучитьСоединениеСИнформационнойБазой(СтрокаБаза.Значение);
		Если СтруктураПодключения.Connect <> Неопределено Тогда
			Connect = СтруктураПодключения.Connect;
			ДвоичныеДанныеОбработкиCOM = Connect.Base64Значение(ДДОбработкиВBase64);
			//производим запись обраотки для исполнения кода в файл на сервере
			ПутьКфайлуОбработки = КаталогВременныхФайлов() + ИмяОбработки;
			ДвоичныеДанныеОбработкиCOM.Записать(ПутьКфайлуОбработки);
			Connect.ВнешниеОбработки.Создать(ПутьКфайлуОбработки).ВыполнитьКод(ИсполняемыйКод);	
			//Connect.Выполнить(ИсполняемыйКод);	
		Иначе
			Сообщить("Подключение к базе "+СтруктураПодключения.ИмяБазыВКластере + " не установлено");
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьЗащитуОтОпасныхДействий(Команда)
	ОтключитьЗащитуОтОпасныхДействийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтключитьЗащитуОтОпасныхДействийНаСервере()
	Для каждого СтрокаБаза из СписокБазДанных цикл
		СтруктураПодключения = РаботаСПодключениямиCOM.ПолучитьСоединениеСИнформационнойБазой(СтрокаБаза.Значение);
		Если СтруктураПодключения.Connect <> Неопределено Тогда
			Connect = СтруктураПодключения.Connect;
			ТекущийПользовательCOM = Connect.ПользователиИнформационнойБазы.ТекущийПользователь();
			ТекущийПользовательCOM.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			ТекущийПользовательCOM.Записать();
			
		Иначе
			Сообщить("Подключение к базе "+СтруктураПодключения.ИмяБазыВКластере + " не установлено");
		Конецесли;
	КонецЦикла;
КонецПроцедуры
