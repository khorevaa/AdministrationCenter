
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТестCOMПодключений(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	
	ТестCOMПодключенийНаСервере(МассивБаз);
	
КонецПроцедуры

&НаСервере
Процедура ТестCOMПодключенийНаСервере(МассивБаз)
	
	Для каждого СтрокаБаза из МассивБаз цикл
		СтруктураПодключения = РаботаСПодключениямиCOM.ПолучитьСоединениеСИнформационнойБазой(СтрокаБаза);
		Если СтруктураПодключения.Connect <> Неопределено Тогда
			Сообщить("Подключение к базе "+СтруктураПодключения.ИмяБазыВКластере + " успешно установлено");
		Иначе
			Сообщить("Подключение к базе "+СтруктураПодключения.ИмяБазыВКластере + " не установлено");
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБазыВСписок(Команда)
	ОткрытьФорму("Обработка.ЗагрузкаИнформационныхБаз.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеПредприятия(Команда)
	
	ТипЗапуска = "ЗАПУСТИТЬПРЕДПРИЯТИЕ";
	МассивБаз = СформироватьМассивБазКПодключению();
	
	ПараметрыЗапускаПриложения = РаботаСПодключениямиCOM.ПодготовитьПараметрыЗапускаПриложений(МассивБаз, ТипЗапуска);
	Для каждого ПараметрБазы Из ПараметрыЗапускаПриложения цикл
		ЗапуститьПриложение(ПараметрБазы.СтрокаЗапускаПриложения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеКонфигуратора(Команда)
	
	ТипЗапуска = "ЗАПУСККОНФИГУРАТОРА";
	МассивБаз = СформироватьМассивБазКПодключению();
	
	ПараметрыЗапускаПриложения = РаботаСПодключениямиCOM.ПодготовитьПараметрыЗапускаПриложений(МассивБаз, ТипЗапуска);
	Для каждого ПараметрБазы Из ПараметрыЗапускаПриложения цикл
		ЗапуститьПриложение(ПараметрБазы.СтрокаЗапускаПриложения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеОбновитьИзХранилища(Команда)
	
	ТипЗапуска = "ОБНОВЛЕНИЕХРАНИЛИЩА";
	МассивБаз = СформироватьМассивБазКПодключению();
	//УстановитьСостоянияИнформационныхБаз(МассивБаз, ТекущееСостояние);
	ПараметрыЗапускаПриложения = РаботаСПодключениямиCOM.ПодготовитьПараметрыЗапускаПриложений(МассивБаз, ТипЗапуска);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапускаПриложения, УникальныйИдентификатор);
	ПодключитьОбработчикОжидания("ВыполнитьЗапускПриложения", 2, ложь); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеВыгрузитьКопиюБазы(Команда)
	
	ТипЗапуска = "ВЫГРУЗКАИНФОРМАЦИОННОЙБАЗЫ";
	МассивБаз = СформироватьМассивБазКПодключению();
	//УстановитьСостоянияИнформационныхБаз(МассивБаз, ТекущееСостояние);
	ПараметрыЗапускаПриложения = РаботаСПодключениямиCOM.ПодготовитьПараметрыЗапускаПриложений(МассивБаз, ТипЗапуска);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапускаПриложения, УникальныйИдентификатор);
	ПодключитьОбработчикОжидания("ВыполнитьЗапускПриложения", 2, ложь); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеЗагрузитьКопиюБазы(Команда)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеОбновитьКонфигурациюБД(Команда)
	
	ТипЗапуска = "ОБНОВЛЕНИЕКОНФИГУРАЦИИ";
	МассивБаз = СформироватьМассивБазКПодключению();
	//УстановитьСостоянияИнформационныхБаз(МассивБаз, ТекущееСостояние);
	ПараметрыЗапускаПриложения = РаботаСПодключениямиCOM.ПодготовитьПараметрыЗапускаПриложений(МассивБаз, ТипЗапуска);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапускаПриложения, УникальныйИдентификатор);
	ПодключитьОбработчикОжидания("ВыполнитьЗапускПриложения", 5, ложь); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкиКандидатовИерархически(Знач ДанныеСтроки)
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Элемент)
	ОбновитьДанныеНаФорме();
	//Уровень1Группировки = СписокИнформационныхБаз.ПолучитьЭлементы();
	//Для каждого СтрокаГруппировки из Уровень1Группировки цикл
	//	Элементы.СписокИнформационныхБаз.Свернуть(СтрокаГруппировки.ПолучитьИдентификатор());
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБазы(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	ОповеститьОВыборе(МассивБаз);
	//ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхПользователей(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	
	ПараметрыФормы = Новый Структура("ИнформационныеБазы",  МассивБаз);
	ОткрытьФорму("Обработка.РабочееМестоАдминистратора.Форма.АктивныеПользователи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБлокировкуСеансовБД(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	ПараметрыБлокировкиНачалаСеансов = РаботаСПодключениямиCOM.ПолучитьПараметрыБлокировкиНачалаСеансов();	
	
	Если НЕ ЗначениеЗаполнено(ПараметрыБлокировкиНачалаСеансов.КодРазрешения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Не установлен код разрешения. Перед началом установки блокировки, задайте код разрешения в настройках",,"НастройкиПользователя", "ЭтотОбъект.Команды",);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ПараметрыБлокировкиНачалаСеансов", ПараметрыБлокировкиНачалаСеансов); 
	
	ВыполнитьДействиеСоСвойствамиБазВКластере(МассивБаз, СтруктураПараметров, "УстановитьБлокировку");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБлокировкуСеансовБДНаСервере(СтрокаБаза, БазаПроцесса, СоединениеСРабочимПроцессом, СтруктураПараметров)
	
	ПараметрыБлокировкиНачалаСеансов = СтруктураПараметров.ПараметрыБлокировкиНачалаСеансов;
	
	БазаПроцесса.DeniedFrom = ТекущаяДата() + (ПараметрыБлокировкиНачалаСеансов.ЗадержкаБлокировакиСеансов*60);
	Если ЗначениеЗаполнено(ПараметрыБлокировкиНачалаСеансов.ПериодБлокировкиНачалаСеансов) Тогда
		БазаПроцесса.DeniedTo = ТекущаяДата() + (ПараметрыБлокировкиНачалаСеансов.ПериодБлокировкиНачалаСеансов*60) + (ПараметрыБлокировкиНачалаСеансов.ЗадержкаБлокировакиСеансов*60);
		СообщениеОДоступности = " .База снова будет доступна в " + БазаПроцесса.DeniedTo;
	Иначе
		СообщениеОДоступности = "";
	КонецЕсли;
	БазаПроцесса.DeniedMessage = ПараметрыБлокировкиНачалаСеансов.СообщениеБлокировки+СообщениеОДоступности;		//InfoBaseInfo.DeniedParameter = ;
	БазаПроцесса.PermissionCode = ПараметрыБлокировкиНачалаСеансов.КодРазрешения;
	БазаПроцесса.SessionsDenied = 1;
	БазаПроцесса.ScheduledJobsDenied = 1;
	СоединениеСРабочимПроцессом.UpdateInfoBase(БазаПроцесса);
	СтруктураСостояния = Новый Структура("БлокировкаНачалаСеансов, ПараметрыБлокировки");
	СтруктураСостояния.БлокировкаНачалаСеансов = Истина;
	СтруктураСостояния.ПараметрыБлокировки = "С " + БазаПроцесса.DeniedFrom + " по " + БазаПроцесса.DeniedTo + ". Код: "+ БазаПроцесса.PermissionCode;
	
	ЗаписатьРезультатВыполнения("Установка блокировки сеансов", СтрокаБаза, СтруктураСостояния);  
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьБлокировкуСеансовБД(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	
	СтруктураПараметров = Новый Структура;
	ВыполнитьДействиеСоСвойствамиБазВКластере(МассивБаз, СтруктураПараметров,  "СнятьБлокировку");
	
КонецПроцедуры

&НаСервере
Процедура СнятьБлокировкуСеансовБДНаСервере(СтрокаБаза, БазаПроцесса, СоединениеСРабочимПроцессом, СтруктураПараметров)
	
	БазаПроцесса.DeniedFrom = Дата(1, 1, 1);
	БазаПроцесса.DeniedTo =Дата(1, 1, 1);
	БазаПроцесса.DeniedMessage = "";
	//InfoBaseInfo.DeniedParameter = ;
	БазаПроцесса.PermissionCode = "";
	БазаПроцесса.SessionsDenied = 0;
	БазаПроцесса.ScheduledJobsDenied = 0;
	
	СоединениеСРабочимПроцессом.UpdateInfoBase(БазаПроцесса);
	
	СтруктураСостояния = Новый Структура("БлокировкаНачалаСеансов, ПараметрыБлокировки");
	СтруктураСостояния.БлокировкаНачалаСеансов = Ложь;
	СтруктураСостояния.ПараметрыБлокировки = "";
	
	ЗаписатьРезультатВыполнения("Снятие блокировки сеансов", СтрокаБаза, СтруктураСостояния);  
	
КонецПроцедуры

&НаКлиенте
Процедура Информация_СостояниеБлокировкиСеансов(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	
	СтруктураПараметров = Новый Структура;
	ВыполнитьДействиеСоСвойствамиБазВКластере(МассивБаз, СтруктураПараметров, "ПолучитьСвойстваБазы");
	
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьСвойстваБазыНаСервере(СтрокаБаза, БазаПроцесса)
	
	СтруктураСостояния = Новый Структура("БлокировкаНачалаСеансов, ПараметрыБлокировки, SQLБазаДанных, SQLСерверБазДанных");
	СтруктураСостояния.БлокировкаНачалаСеансов = БазаПроцесса.SessionsDenied;
	СтруктураСостояния.ПараметрыБлокировки = "С " + БазаПроцесса.DeniedFrom + " по " + БазаПроцесса.DeniedTo + ". Код: "+ БазаПроцесса.PermissionCode;
	СтруктураСостояния.SQLБазаДанных = БазаПроцесса.DBName;
	СтруктураСостояния.SQLСерверБазДанных = БазаПроцесса.DBServerName; 
		
	КонтрольИнформационныхБаз.УстановитьСостояниеИнформационнойБазы(СтрокаБаза, СтруктураСостояния);
	
КонецПроцедуры

&НаКлиенте
Процедура Информация_КонфигурацияИзмененаИРелиз(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	
	ДоляВыполнения = МассивБаз.Количество() / 10;
	ВсегоБаз = МассивБаз.Количество();
	Состояние("Обработана "+ 0 + " из " + ВсегоБаз + " баз", 0,,);
	Для Счетчик = 1 По ВсегоБаз Цикл
		
		СтрокаБаза = МассивБаз[Счетчик-1];
		
		СтруктураСостояния = Информация_КонфигурацияИзмененаИРелизНаСервере(СтрокаБаза);
		Прогресс = Счетчик / ВсегоБаз * 100;
		ЗаписатьРезультатВыполнения("Проверка измененности конфигурации и версии релиза", СтрокаБаза, СтруктураСостояния);
		
		Состояние("Обработана "+Счетчик + " из " + ВсегоБаз + " баз", Прогресс,,);

	КонецЦикла;
	
	//ОбновитьДанныеНаФорме();
	
КонецПроцедуры

&НаСервере
Функция Информация_КонфигурацияИзмененаИРелизНаСервере(СтрокаБаза)
	
		СтруктураСостояния = Новый Структура;
		
		//Получение информации о релизе и измененности конфигурации
		//Подключение через COM 
		СтруктураПодключения = РаботаСПодключениямиCOM.ПолучитьСоединениеСИнформационнойБазой(СтрокаБаза);
		Если СтруктураПодключения.Connect <> Неопределено Тогда
			СтруктураСостояния.Вставить("ТекущийРелиз", СтруктураПодключения.Connect.Метаданные.Версия);
			СтруктураСостояния.Вставить("КонфигурацияИзменена", СтруктураПодключения.Connect.КонфигурацияИзменена());
		Иначе
			Сообщить("Подключение к базе "+СтруктураПодключения.ИмяБазыВКластере + " не установлено");
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		
		Возврат СтруктураСостояния;
		
КонецФункции

&НаКлиенте
Процедура Информация_ПосмотретьЖурналСобытий(Команда)
	
	МассивБаз = СформироватьМассивБазКПодключению();
	
	СписокЗначенийОтбора = Новый СписокЗначений;
	Для каждого СтрокаМассива из МассивБаз цикл
		СписокЗначенийОтбора.Добавить(СтрокаМассива);
	КонецЦикла;
	
	УсловияОтбора = новый Структура();
	УсловияОтбора.Вставить("ИнформационнаяБаза",СписокЗначенийОтбора);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.ЖурналСобытийИнформационныхБаз.Форма.ФормаОтчета", ПараметрыФормы, 
	ЭтаФорма, 
	,ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПользователя(Команда)
	
	КлючЗаписи = ПолучитьКлючЗаписиНастроекПользователя();
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
	Попытка
		ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	Исключение
		ОткрытьФорму("РегистрСведений.НастройкиПользователей.Форма.ФормаЗаписи", , ЭтаФорма);
	КонецПопытки;
		
		
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийРеквизитовСпискаБаз

&НаКлиенте
Процедура СписокИнформационныхБазОтметкаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.СписокИнформационныхБаз.ТекущиеДанные;
	
	ДанныеСтроки.Отметка = ДанныеСтроки.Отметка % 2;
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Форма выбора из списка
	Если Параметры.Свойство("ВыбратьБазы") Тогда
		Элементы.ФормаВыбратьБазы.Видимость=Истина;
		Элементы.ФормаВыбратьБазы.КнопкаПоУмолчанию=Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ГруппировкаСтрок = "Конфигурация";
	
	ОбновитьДанныеНаФорме();
	
	//Уровень1Группировки = СписокИнформационныхБаз.ПолучитьЭлементы();
	//Для каждого СтрокаГруппировки из Уровень1Группировки цикл
	//	Элементы.СписокИнформационныхБаз.Свернуть(СтрокаГруппировки.ПолучитьИдентификатор());
	//КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДанныеНаФорме()
	
	//Получить элемент условного оформления для заполнения
	Для каждого ЭлементОформления из ЭтаФорма.УсловноеОформление.Элементы цикл
		Если ЭлементОформления.Представление = "Оформление 1 уровня" тогда 
			СписокСтрокКОформлению = ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение;
			СписокСтрокКОформлению.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	//Отказ от формирования
	Если НЕ ЗначениеЗаполнено(ГруппировкаСтрок) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите группировку строк";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	//Видимость реквизитов
	Если ГруппировкаСтрок = "Конфигурация" Тогда
		Элементы.СписокИнформационныхБазКонфигурация.Видимость=Ложь;
		Элементы.СписокИнформационныхБазКластер.Видимость=Истина;
	Иначе
		Элементы.СписокИнформационныхБазКонфигурация.Видимость=Истина;
		Элементы.СписокИнформационныхБазКластер.Видимость=Ложь;
	КонецЕсли;
	
	тДерево = РеквизитФормыВЗначение("СписокИнформационныхБаз");	 
	тДерево.Строки.Очистить();	 
	ЗначениеВРеквизитФормы(тДерево, "СписокИнформационныхБаз");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналСобытийСрезПоследних.ИнформационнаяБаза,
	|	ЖурналСобытийСрезПоследних.Событие
	|ПОМЕСТИТЬ ВТЖурналСобытий
	|ИЗ
	|	РегистрСведений.ЖурналСобытий.СрезПоследних КАК ЖурналСобытийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформационныеБазы.Наименование КАК Наименование,
	|	ИнформационныеБазы.Кластер КАК Кластер,
	|	ИнформационныеБазы.Ссылка,
	|	ИнформационныеБазы.Конфигурация КАК Конфигурация,
	|	ИнформационныеБазы.Архивная КАК Архивная,
	|	ВЫБОР
	|		КОГДА СостояниеИнформационныхБаз.БлокировкаНачалаСеансов
	|			ТОГДА СостояниеИнформационныхБаз.ПараметрыБлокировки
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПараметрыБлокировки,
	|	СостояниеИнформационныхБаз.ДатаРезервнойКопии КАК ДатаРезервнойКопии,
	|	СостояниеИнформационныхБаз.ТекущийРелиз КАК ТекущийРелиз,
	|	СостояниеИнформационныхБаз.КонфигурацияИзменена КАК КонфигурацияИзменена,
	|	ВТЖурналСобытий.Событие КАК ПоследняяОперация
	|ИЗ
	|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеИнформационныхБаз КАК СостояниеИнформационныхБаз
	|		ПО (СостояниеИнформационныхБаз.ИнформационнаяБаза = ИнформационныеБазы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЖурналСобытий КАК ВТЖурналСобытий
	|		ПО (ВТЖурналСобытий.ИнформационнаяБаза = ИнформационныеБазы.Ссылка)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Архивная = ЛОЖЬ
	|				ТОГДА ИнформационныеБазы.Архивная = ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнформационныеБазы.Конфигурация.Наименование,
	|	Наименование";
	
	Запрос.УстановитьПараметр("Архивная", ПоказыватьАрхивныеБазы);
	
	Запрос.текст = Запрос.текст + " ИТОГИ ПО " + ГруппировкаСтрок; 
	//СтрЗаменить(Запрос.Текст, "%ГРУППИРОВКАСТРОК%", ГруппировкаСтрок);
	//УРОВЕНЬ 1	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() цикл
		Уровень1Группировки = СписокИнформационныхБаз.ПолучитьЭлементы();
		НоваяСтрокаУровень1 = Уровень1Группировки.Добавить();
		ЗначениеУровень1Группировки = ?(НЕ ЗначениеЗаполнено(Выборка[ГруппировкаСтрок]), "<Не указана конфигурация для базы>", Выборка[ГруппировкаСтрок]);
		НоваяСтрокаУровень1.Ссылка = ЗначениеУровень1Группировки;
		
		//Добавляем в условное оформление
		СписокСтрокКОформлению.Добавить(НоваяСтрокаУровень1.Ссылка);
		
		//УРОВЕНЬ 2	
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() цикл
			Уровень2Группировки = НоваяСтрокаУровень1.ПолучитьЭлементы();
			НоваяСтрокаУровень2 = Уровень2Группировки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУровень2, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	
	//Элементы.СписокИнформационныхБаз.НачальноеОтображениеДерева=НачальноеОтображениеДерева.НеРаскрывать ;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьМассивБазКПодключению()
	
	МассивБаз = Новый Массив;
	
	Уровень1Группировки = СписокИнформационныхБаз.ПолучитьЭлементы();
	//первый уровень это кластеры
	Для каждого СтрокаУровень1 Из Уровень1Группировки цикл
		//Второй уровень это базы
		Уровень2Группировки = СтрокаУровень1.ПолучитьЭлементы();
		Для каждого СтрокаУровень2 из Уровень2Группировки цикл
			Если СтрокаУровень2.Отметка Тогда
				МассивБаз.Добавить(СтрокаУровень2.Ссылка);
				//Создаем соединение для каждой базы
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если массивБаз.Количество() = 0 Тогда
		ВыделенныеСтроки = Элементы.СписокИнформационныхБаз.ВыделенныеСтроки;
		Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтроки Цикл
			ТекущиеДанные = Элементы.СписокИнформационныхБаз.ДанныеСтроки(ВыделеннаяСтрока);
			МассивБаз.Добавить(ТекущиеДанные.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивБаз;
	
КонецФункции

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Отметка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Отметка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Отметка = 1);
			НеВсеЛожь = НеВсеЛожь Или (Потомок.Отметка > 0);
		КонецЦикла;
		
		Если ВсеИстина Тогда
			РодительСтроки.Отметка = 1;
			
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Отметка = 2;
			
		Иначе
			РодительСтроки.Отметка = 0;
			
		КонецЕсли;
		
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапускПриложения()
	
	Элементы.ГруппаХодВыполнения.Видимость=Истина;
	
	ПараметрыЗапускаПриложения = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	//1. ПРОВЕРКА НАЛИЧИЯ БАЗ ДЛЯ ОБРАБОТКИ
	Если ПараметрыЗапускаПриложения.Количество() = 0 Тогда
		Элементы.ГруппаХодВыполнения.Видимость=Ложь;
		БазаВОбработке = Неопределено;
		ОтключитьОбработчикОжидания("ВыполнитьЗапускПриложения");
		Возврат;
	КонецЕсли;
	
	//2. ВЫПОЛНЕНИЕ ЗАПУСКА ПРИЛОЖЕНИЯ
	Элементы.ОсталосьОбработать.Заголовок = "Осталось обработать: " + ПараметрыЗапускаПриложения.Количество();
	ПараметрБазы = ПараметрыЗапускаПриложения[0];
	Если БазаВОбработке <> ПараметрБазы.ИнформационнаяБаза тогда
		БазаВОбработке = ПараметрБазы.ИнформационнаяБаза;
		ВремяНачалаОбработки = ТекущаяДата();
		КоличествоПопыток = 0;
		ЗапуститьПриложение(ПараметрБазы.СтрокаЗапускаПриложения);
	КонецЕсли;
	
	//3. ПОЛУЧЕНИЕ И ПРОВЕРКА СОДЕРЖИМОГО ЛОГ ФАЙЛА
	РезультатВыполнения = ПолучитьРезультатВыполненияИзФайла(ПараметрБазы);
	
	Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ЗаписатьРезультатВыполнения(РезультатВыполнения, БазаВОбработке);
		
		//Удаляем обработанную базу
		ПараметрыЗапускаПриложения.Удалить(0);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапускаПриложения, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРезультатВыполненияИзФайла(ПараметрБазы)
	
	РезультатВыполнения = "";
	ВремяВОбработке = ТекущаяДата() - ВремяНачалаОбработки;
	Если СтрНайти(ПараметрБазы.СтрокаЗапускаПриложения, "/Out") Тогда
		НачалоСтроки = СтрНайти(ПараметрБазы.СтрокаЗапускаПриложения, "/Out") + 5; //Обрезаем /Out 
		ДлинаСтроки = СтрНайти(ПараметрБазы.СтрокаЗапускаПриложения, ".log") - НачалоСтроки + 4;
		ПутьКФайлуЛога = Сред(ПараметрБазы.СтрокаЗапускаПриложения, НачалоСтроки, ДлинаСтроки);
		ВыбранныйФайл = Новый Файл(ПутьКФайлуЛога);
		
		Если ВыбранныйФайл.Существует() Тогда
			fso=Новый COMОбъект("Scripting.FileSystemObject");
			ТекстовыйФайл=fso.OpenTextFile(ПутьКФайлуЛога, 1, 0, 0); //Открываем файл в режиме "только чтение"           
			Пока ТекстовыйФайл.AtEndOfStream=0 Цикл
				ДанныеФайла=ТекстовыйФайл.ReadAll();
				Если СтрНайти(ВРЕГ(ДанныеФайла),"ОШИБКА") 
					ИЛИ СтрНайти(ВРЕГ(ДанныеФайла),"УСПЕШНО") 
					ИЛИ СтрНайти(ВРЕГ(ДанныеФайла),"НЕСООТВЕТСТВИЕ") Тогда
					РезультатВыполнения = ДанныеФайла;
				КонецЕсли;
			КонецЦикла; 
			ТекстовыйФайл.Close(); 
			
			//Пропускаем зависшие обработчики 
			Если Не ЗначениеЗаполнено(РезультатВыполнения) и ВремяВОбработке > 1200 Тогда
				РезультатВыполнения = "В течении "+ Формат(ВремяВОбработке / 60, "ЧДЦ=") + " минут, от базы небыло получено результата. Обработчик переходит к обработке следующей базы"; 
			КонецЕсли;
		Иначе
			КоличествоПопыток = КоличествоПопыток + 1;
			Если КоличествоПопыток > 4 Тогда
				//пропускаем обработанную базу
				РезультатВыполнения = "Файл лога не найден. Проверить результат выполнения невозможно";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РезультатВыполнения = "Файл лога не создается. Проверить результат выполнения невозможно "
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

//Записывает данные по текущему состоянию базы, и выполняемую операцию над базой в журнал событий
//Так же обновляет строку в дереве "СписокИнформационныхБаз"
//
// Параметры:
//  РезультатВыполнения  - Строка - Строка с результатом операции над базой
//                 <продолжение описания параметра>
//  БазаВОбработке  - СправочникСсылка.ИнформационныеБазы - сама база
//                 <продолжение описания параметра>
//  СтруктураСостояния  - Структура - Ключи и значения структуры полностью соответствую структуре регистра "СостояниеИнформационныхБаз"
//                 Данные из структуры используются для последующей записи данных в регистр "СостояниеИнформационныхБаз"
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
&НаСервере
Функция ЗаписатьРезультатВыполнения(РезультатВыполнения, БазаВОбработке, СтруктураСостояния = Неопределено)
	
	Если СтруктураСостояния = Неопределено Тогда
		СтруктураСостояния = Новый Структура;
	КонецЕсли;
	
	Если СтрНайти(РезультатВыполнения, "Выгрузка информационной базы успешно") Тогда
		СтруктураСостояния.Вставить("ДатаРезервнойКопии", ВремяНачалаОбработки);
	ИначеЕсли СтрНайти(РезультатВыполнения, "Обновление конфигурации успешно") Тогда
		СтруктураСостояния.Вставить("КонфигурацияИзменена", Ложь);
	КонецЕсли;
	
	Для Каждого Элемент из СтруктураСостояния Цикл
		РезультатВыполнения = РезультатВыполнения + Символы.ПС + Элемент.Ключ + ": " + Элемент.Значение;
	КонецЦикла;
	
	КонтрольИнформационныхБаз.УстановитьСостояниеИнформационнойБазы(БазаВОбработке, СтруктураСостояния);
	КонтрольИнформационныхБаз.ЗаписатьСобытиеВЖурнал(БазаВОбработке, РезультатВыполнения);
	
	//Отображаем результаты на форме
	Уровень1Группировки = СписокИнформационныхБаз.ПолучитьЭлементы();
	//первый уровень это кластеры
	Для каждого СтрокаУровень1 Из Уровень1Группировки цикл
		//Второй уровень это базы
		Уровень2Группировки = СтрокаУровень1.ПолучитьЭлементы();
		Для каждого СтрокаУровень2 из Уровень2Группировки цикл
			Если СтрокаУровень2.Ссылка = БазаВОбработке Тогда
				
				СтрокаУровень2.ПоследняяОперация = РезультатВыполнения; 
				ЗаполнитьЗначенияСвойств(СтрокаУровень2, СтруктураСостояния);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиНастроекПользователя();
	
	Возврат РегистрыСведений.НастройкиПользователей.СоздатьКлючЗаписи(Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь));
	
КонецФункции

&НаСервере
Процедура ВыполнитьДействиеСоСвойствамиБазВКластере(МассивБаз, СтруктураПараметров, Действие)
	
	СоединениеСКластером = Неопределено;
	//Чтобы каждый раз не получать соединение с одним и тем же кластером ставим проверку
	ПредыдущийКластер = Неопределено;
	Для каждого СтрокаБаза из МассивБаз цикл
		
		Попытка
			
			КластерБазы = СтрокаБаза.Кластер; 
			Если КластерБазы <> ПредыдущийКластер ИЛИ СоединениеСКластером = Неопределено Тогда 
				СоединениеСАгентомСервера = РаботаСПодключениямиCOM.ПолучитьСоединениеСАгентомСервера(КластерБазы);
				СоединениеСКластером = РаботаСПодключениямиCOM.ПолучитьКластер(КластерБазы, СоединениеСАгентомСервера); 
			КонецЕсли;
			
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(СоединениеСКластером);
			
			Для каждого РабочийПроцесс из РабочиеПроцессы цикл
				Если РабочийПроцесс.Running <> 1 И РабочийПроцесс.IsEnable <> 1 Тогда
					Продолжить; //Не тратим время на неработающие процессы 
				КонецЕсли;
				
				//Подключаемся к рабочему процессу
				СоединениеСРабочимПроцессом = РаботаСПодключениямиCOM.ПолучитьСоединениеСРабочимПроцессом(КластерБазы,СтрокаБаза, РабочийПроцесс);
				
				Если СоединениеСРабочимПроцессом <> Неопределено Тогда
					БазаНайдена = Ложь;
					//Получаем список баз процесса, база отобранная в кластере не подходит для дальнейших действий
					СписокБазПроцесса = СоединениеСРабочимПроцессом.GetInfoBases();
					Для каждого БазаПроцесса из СписокБазПроцесса цикл
						Если БазаПроцесса.Name = СтрокаБаза.ИмяБазыВКластере Тогда
							БазаНайдена = Истина;
							//Останавливаемся на текущей базе кластера, ее будем использовать для дальнейших манипуляций
							СоединениеСРабочимПроцессом.AddAuthentication(СтрокаБаза.Пользователь, СтрокаБаза.ПарольПользователя);
							
							Если Действие = "УстановитьБлокировку" Тогда
								УстановитьБлокировкуСеансовБДНаСервере(СтрокаБаза, БазаПроцесса, СоединениеСРабочимПроцессом, СтруктураПараметров);
							ИначеЕсли Действие = "СнятьБлокировку" Тогда
								СнятьБлокировкуСеансовБДНаСервере(СтрокаБаза, БазаПроцесса, СоединениеСРабочимПроцессом, СтруктураПараметров);
							ИначеЕсли Действие = "ПолучитьСвойстваБазы" Тогда
								ПолучитьСвойстваБазыНаСервере(СтрокаБаза, БазаПроцесса);
							КонецЕсли;
							
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если БазаНайдена Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; //Процессы
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			Продолжить;
		КонецПопытки;
		
		ПредыдущийКластер = КластерБазы;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьАрхивныеБазыПриИзменении(Элемент)
	
	ОбновитьДанныеНаФорме();
	
КонецПроцедуры


#КонецОбласти


