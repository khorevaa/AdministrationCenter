
Функция ПодготовитьПараметрыЗапускаПриложений(МассивБаз, ТипЗапуска) Экспорт
	
	ПараметрыЗапускаПриложений = Новый Массив;
	
	ТаблицаПараметровБаз = СформироватьТаблицуПараметровБаз(МассивБаз);
	
	Для каждого СтрокаПараметрыБазы из ТаблицаПараметровБаз Цикл
		СтрокаПутиКФайлуЗапуска = ПолучитьСтрокуПутиКФайлуЗапуска(СтрокаПараметрыБазы.ВерсияПлатформы);		
		СтрокаПараметрыЗапуска= ПолучитьСтрокуПараметровЗапуска(СтрокаПараметрыБазы, ТипЗапуска);
		
		Если ПустаяСтрока(СтрокаПутиКФайлуЗапуска) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось сформировать путь до файла 1cestart'");
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		СтрокаЗапускаПриложения = СтрокаПутиКФайлуЗапуска + СтрокаПараметрыЗапуска;
		
		СтруктураПодключения = Новый Структура("ИнформационнаяБаза, СтрокаЗапускаПриложения, ТипЗапуска");
		СтруктураПодключения.ИнформационнаяБаза = СтрокаПараметрыБазы.Ссылка;
		СтруктураПодключения.СтрокаЗапускаПриложения = СтрокаЗапускаПриложения;
		СтруктураПодключения.ТипЗапуска = ТипЗапуска;
		ПараметрыЗапускаПриложений.Добавить(СтруктураПодключения);
		
	КонецЦикла;
	
	Возврат ПараметрыЗапускаПриложений;
	
КонецФункции

Функция ПолучитьСтрокуПодключения(База)  Экспорт
	
		СтрокаПодключения = "Srvr = " + """" + СокрЛП(База.Кластер.АдресАгентаСервера)
						  +":"+ СокрЛП(База.Кластер.ПортКластера)  + """" + ";" 
						  + "Ref =  " + """" + СокрЛП(База.ИмяБазыВКластере)    + """" + ";"
						  + "Usr =  " + """" + СокрЛП(База.Пользователь) + """" + ";"
						  + "Pwd =  " + """" + СокрЛП(База.ПарольПользователя)       + """" + ";";
	Возврат СтрокаПодключения;
	
КонецФункции

Функция ПолучитьСтрокуПутиКФайлуЗапуска(ВерсияПлатформы) Экспорт
	
	Если СтрНайти(ВерсияПлатформы, "8.2")  Тогда
		Папка1С = "1cv82";
	Иначе
		Папка1С = "1cv8";
	КонецЕсли;
	Версия1С = Строка(ВерсияПлатформы);
	
	СтрокаПути = "";
	
	//Получаем папки Programm files 
	ПапкиСПрограммами = Новый Массив;
	//Производим поиск нужной версии платформы
	ФСО = Новый COMОбъект("Scripting.FileSystemObject");
	КореньДиска = ФСО.GetFolder("C:\").SubFolders;
	Для каждого ПапкаКорня из КореньДиска цикл
		Если ПапкаКорня.Name =  "Program Files" ИЛИ ПапкаКорня.Name = "Program Files (x86)"Тогда
			ПапкиСПрограммами.Добавить(ПапкаКорня.Name);
		КонецЕсли;		
	КонецЦикла;

	//Обходим каждую программ филес и находим нужную программу
	Для каждого ПапкаСПрограммами из ПапкиСПрограммами цикл
		ПапкиПрограмм = ФСО.GetFolder("C:\"+ПапкаСПрограммами+"\").SubFolders;
		Для Каждого ПапкаПрограммы из ПапкиПрограмм цикл
			Если ПапкаПрограммы.Name = Папка1С тогда
				ВерсииПрограмм = ФСО.GetFolder("C:\"+ПапкаСПрограммами+"\"+Папка1С+"\").SubFolders;
				Для каждого ВерсияПрограммы из ВерсииПрограмм цикл
					Если ВерсияПрограммы.Name = Строка(ВерсияПлатформы) Тогда
						СтрокаПути = "C:\"+ПапкаСПрограммами+"\"+Папка1С+"\"+Версия1С+"\bin\1cv8.exe";
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;  
	
	Возврат СтрокаПути;

КонецФункции


//ПараметрыБазы - Структура  или строка таблицы значений
//ПараметрыБазы.СерверБазы
//ПараметрыБазы.ПортБазы
//ПараметрыБазы.ПользовательБазы
//ПараметрыБазы.ПарольБазы
//ПараметрыБазы.ИмяБазыДанных
//ПараметрыБазы.АдресХранилища
//ПараметрыБазы.ПользовательХранилища
//ПараметрыБазы.ПарольПользователяХранилища
Функция ПолучитьСтрокуПараметровЗапуска(ПараметрыБазы, ТипОбновления, фКешЗначений=Неопределено) Экспорт
	
	ЭтоСервернаяИБ            = ПараметрыБазы.ЭтоСервернаяИБ;
	СтрокаЗапускаКонфигурации =  "";
	
	Если Врег(ТипОбновления) = "ОБНОВЛЕНИЕХРАНИЛИЩА" Тогда
	
		Если ЭтоСервернаяИБ Тогда
			
			СтрокаПараметрыЗапуска = 
								 " DESIGNER /S" + """" + ПараметрыБазы.СерверБазы + ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения								
								+ " /ConfigurationRepositoryF" + """" + ПараметрыБазы.АдресХранилища + """"
								+ " /ConfigurationRepositoryN" + """" + ПараметрыБазы.ПользовательХранилища + """"
								+ " /ConfigurationRepositoryP" + """" + ПараметрыБазы.ПарольПользователяХранилища + """"
								+ " /ConfigurationRepositoryUpdateCfg"
								+ " /Visible" 
								+ " /DumpResult" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dump")+ """"
								+ " /Out" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_" + Новый УникальныйИдентификатор +".log")+ """"; ///Out
		Иначе
			//Файловая
		КонецЕсли;
	
	ИначеЕсли Врег(ТипОбновления) = "ОБНОВЛЕНИЕКОНФИГУРАЦИИ" Тогда
	
		Если ЭтоСервернаяИБ Тогда
			
			СтрокаПараметрыЗапуска = 
								 " DESIGNER /S" + """" + ПараметрыБазы.СерверБазы + ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения								
								+ " /UpdateDBCfg"
								+ " /Visible" 
								+ " /DumpResult" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dump")+ """"
								+ " /Out" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_" + Новый УникальныйИдентификатор +".log")+ """"; ///Out
		Иначе
			//Файловая
		КонецЕсли;
		
	ИначеЕсли Врег(ТипОбновления) = "ОБНОВЛЕНИЕТИПОВОЙКОНФИГУРАЦИИ" Тогда
	
		Если ЭтоСервернаяИБ Тогда
			
			СтрокаПараметрыЗапуска = 
								 " DESIGNER /S" + """" + ПараметрыБазы.СерверБазы + ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения								
								+ " /UpdateCfg" + """" + ПараметрыБазы.ПутьКФайлуОбновленияТиповыхКонфигурацийВСтроке + """"
								+ " /UpdateDBCfg" 
								+ " /Visible" 
								+ " /DumpResult" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dump")+ """"
								+ " /Out" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_" + Новый УникальныйИдентификатор +".log")+ """"; ///Out
		Иначе
			//Файловая
		КонецЕсли;
		
	ИначеЕсли Врег(ТипОбновления) = "ВЕРНУТЬСЯККОНФИГУРАЦИИБД" Тогда
	
		Если ЭтоСервернаяИБ Тогда
			
			СтрокаПараметрыЗапуска = 
								 " DESIGNER /S" + """" + ПараметрыБазы.СерверБазы +  ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения								
								+ " /RollbackCfg"
								+ " /Visible" 
								+ " /DumpResult" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dump")+ """"
								+ " /Out" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_" + Новый УникальныйИдентификатор +".log")+ """"; ///Out
		
		Иначе
			//Файловая
		КонецЕсли;
		
	ИначеЕсли Врег(ТипОбновления) = "ЗАПУСТИТЬПРЕДПРИЯТИЕ" Тогда
	
		Если ЭтоСервернаяИБ Тогда
			
			СтрокаПараметрыЗапуска = 
								 " ENTERPRISE  /S" + """" + ПараметрыБазы.СерверБазы + ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения
								+ ?(ПараметрыБазы.РежимЗапуска = Перечисления.РежимЗапускаПриложения.ОбычноеПриложение, " /RunModeOrdinaryApplication","")
			
		Иначе
			СтрокаПараметрыЗапуска = 
								 " ENTERPRISE  /F" + """" + ПараметрыБазы.ПутьКБазе + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения
								+ ?(ПараметрыБазы.РежимЗапуска = Перечисления.РежимЗапускаПриложения.ОбычноеПриложение, " /RunModeOrdinaryApplication","")
		КонецЕсли;
		
	ИначеЕсли Врег(ТипОбновления) = "ЗАПУСККОНФИГУРАТОРА" Тогда
	
		Если ЭтоСервернаяИБ Тогда
			
			СтрокаПараметрыЗапуска = 
								 " DESIGNER  /S" + """" + ПараметрыБазы.СерверБазы + ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" +ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения;
		Иначе
			СтрокаПараметрыЗапуска = 
								+ " ENTERPRISE  /F" + """" + ПараметрыБазы.ПутьКБазе + """"
								+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения;
		КонецЕсли;
		
	ИначеЕсли Врег(ТипОбновления) = "ВЫГРУЗКАИНФОРМАЦИОННОЙБАЗЫ" Тогда
	
		Если ЭтоСервернаяИБ Тогда
			
			СтрокаПараметрыЗапуска = 
								" DESIGNER  /S" + """" + ПараметрыБазы.СерверБазы + ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
								+ " /N"           + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P"           + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения								
								+ " /DumpIB" + """"  + ?(ПараметрыБазы.ПутьКРезервнымКопиямБаз = Неопределено, "", ПараметрыБазы.ПутьКРезервнымКопиямБаз +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dt")+ """" 
								+ " /Visible" 
								+ " /DumpResult" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dump")+ """"
								+ " /Out" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_" + Новый УникальныйИдентификатор +".log")+ """"; ///Out
		Иначе
			СтрокаПараметрыЗапуска = 
								" DESIGNER  /F" + """" + ПараметрыБазы.ПутьКБазе + """"
								+ " /N"           + """" + ПараметрыБазы.ПользовательБазы + """"
								+ " /P"           + """" + ПараметрыБазы.ПарольБазы + """"
								+ " /UC" + ПараметрыБазы.КодРазрешения								
								+ " /DumpIB"      + """" +  ?(ПараметрыБазы.ПутьКРезервнымКопиямБаз = Неопределено, "", ПараметрыБазы.ПутьКРезервнымКопиямБаз +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dt")+ """" 
								+ " /Visible" 
								+ " /DumpResult" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-hhmmss")+".dump")+ """"
								+ " /Out" + """" + ?(ПараметрыБазы.ПутьКФайламДампов = Неопределено,"", ПараметрыБазы.ПутьКФайламДампов +"\" +ПараметрыБазы.ИмяБазыДанных +"_" + Новый УникальныйИдентификатор +".log")+ """"; ///Out
		КонецЕсли;
						
	
		
	ИначеЕсли Врег(ТипОбновления) = "ФОРМИРОВАНИЕОТЧЕТАОСРАВНЕНИИ" Тогда
	
		//Если ЭтоСервернаяИБ Тогда
		//	
		//	//Работает криво!!! Этот отчет платформа не строит!
		//	
		//	СтрокаПараметрыЗапуска = """"
		//						+ СтрокаПути
		//						+ """"
		//						+ " DESIGNER  /S" + """" + ПараметрыБазы.СерверБазы + ?(ПустаяСтрока(ПараметрыБазы.ПортБазы),"", ":" + ПараметрыБазы.ПортБазы) + "/" + ПараметрыБазы.ИмяБазыДанных + """"
		//						+ " /N" + """" + ПараметрыБазы.ПользовательБазы + """"
		//						+ " /P" + """" + ПараметрыБазы.ПарольБазы + """"
		//						+ "/Visible" 
		//						+ "/CompareCfg "
		//							+ " -FirstConfigurationType " + """" + мСравниватьКонфигурацию + """" 
		//							+ " -SecondConfigurationType " + """" + мСравниватьСКонфигурацией + """"
		//							+ " -ReportType Full "
		//							+ " -ReportFormat txt"
		//							+ " -ReportFile " + ?(фКешЗначений = Неопределено, "",фКешЗначений.ФайлыОтчетаОСравнении[ПараметрыБазы.ИмяБазыДанных]);
		//Иначе
		//	//Файловая
		//КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат СтрокаПараметрыЗапуска;
	
КонецФункции

Функция ПолучитьПараметрыБлокировкиНачалаСеансов() Экспорт
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	СтруктураПараметров = Новый Структура("КодРазрешения, СообщениеБлокировки, ПериодБлокировкиНачалаСеансов, ЗадержкаБлокировакиСеансов");
	
	НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Прочитать();
	//Как правило либо одна запись, либо не одной
	Для каждого НастройкаПользователя из НаборЗаписей цикл
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, НастройкаПользователя);
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// COM
// Получить версию платформы в виде числа формата: wwwwxxxxyyyyzzzz,
// например: 0008000100130041, где первые нули опущены
//
// Возвращаемое значение:
//  Число - версия платформы
//
Функция СформироватьТаблицуПараметровБаз(МассивБаз) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.ПутьКФайламДампов,
		|	НастройкиПользователей.ПутьКФайлуОбновленияТиповыхКонфигураций,
		|	НастройкиПользователей.ПутьКРезервнымКопиямБаз,
		|	НастройкиПользователей.ПутьКФайлуСравненияКонфигурации,
		|	НастройкиПользователей.СообщениеБлокировки,
		|	НастройкиПользователей.КодРазрешения,
		|	НастройкиПользователей.ПериодБлокировкиНачалаСеансов,
		|	НастройкиПользователей.ВыполнятьОперацииПоследовательно
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнформационныеБазы.ИмяБазыВКластере КАК ИмяБазыДанных,
		|	ИнформационныеБазы.Пользователь КАК ПользовательБазы,
		|	ИнформационныеБазы.ПарольПользователя КАК ПарольБазы,
		|	Конфигурации.АдресХранилища КАК АдресХранилища,
		|	ВЫБОР
		|		КОГДА ИнформационныеБазы.ПользовательХранилища = """"
		|			ТОГДА Конфигурации.ПользовательХранилища
		|		ИНАЧЕ ИнформационныеБазы.ПользовательХранилища
		|	КОНЕЦ КАК ПользовательХранилища,
		|	ВЫБОР
		|		КОГДА ИнформационныеБазы.ПарольПользователяХранилища = """"
		|			ТОГДА Конфигурации.ПарольПользователяХранилища
		|		ИНАЧЕ ИнформационныеБазы.ПарольПользователяХранилища
		|	КОНЕЦ КАК ПарольПользователяХранилища,
		|	Кластеры.АдресАгентаСервера КАК СерверБазы,
		|	Кластеры.ПортКластера КАК ПортБазы,
		|	Кластеры.ВерсияПлатформы КАК ВерсияПлатформы,
		|	ИнформационныеБазы.ЭтоСервернаяИБ КАК ЭтоСервернаяИБ,
		|	ИнформационныеБазы.ПутьКБазе КАК ПутьКБазе,
		|	ИнформационныеБазы.РежимЗапуска,
		|	ИнформационныеБазы.Ссылка
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кластеры КАК Кластеры
		|		ПО ИнформационныеБазы.Кластер = Кластеры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Конфигурации КАК Конфигурации
		|		ПО ИнформационныеБазы.Конфигурация = Конфигурации.Ссылка
		|ГДЕ
		|	ИнформационныеБазы.Ссылка В(&МассивБаз)";
	
	Запрос.УстановитьПараметр("МассивБаз", МассивБаз);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Сообщить("Не указаны настройки для работы с базами, перед началом работ выполните настройку");
		ТаблицаПараметровБаз = Новый ТаблицаЗначений;
	Иначе
		ТаблицаНастроек = РезультатЗапроса[0].Выгрузить();
		ТаблицаПараметровБаз = РезультатЗапроса[1].Выгрузить();
		Для каждого Колонка из ТаблицаНастроек.Колонки цикл
			ТаблицаПараметровБаз.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		Для каждого СтрокаНастройки из ТаблицаНастроек цикл
			Для каждого СтрокаПараметрБазы из ТаблицаПараметровБаз цикл
				ЗаполнитьЗначенияСвойств(СтрокаПараметрБазы, СтрокаНастройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
	Возврат ТаблицаПараметровБаз;
	
КонецФункции


#Область СлужебныеПроцедурыИФункции

// Получить версию Com объектов
//    ВерсияПлатформы - СправочникСсылка.ВерсииПлатформы
// Возвращаемое значение:
//  Строка - версия в формате V8x
//
Функция ПолучитьВерсиюCom(ВерсияПлатформы = Неопределено)
	
	Если ВерсияПлатформы = Неопределено Тогда
		Инфо = Новый СистемнаяИнформация;
		ВерсияВСтроку = Инфо.ВерсияПриложения;
	Иначе
		ВерсияВСтроку = ВерсияПлатформы.Наименование;
	КонецЕсли;
	
	Попытка 
		
		Версия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ВерсияВСтроку, ".");
		ВерсияСтрока = "V" + Версия[0] + Версия[1];
		
	Исключение 
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
		ЗаписьЖурналаРегистрации(
			"Функция ПолучитьВерсиюCom(ВерсияПлатформы = Неопределено)",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.РаботаСПодключениямиCOM,
			,
			Комментарий);
				
		ВерсияСтрока = "V82";
		
	КонецПопытки;
	
	Возврат ВерсияСтрока;
	
КонецФункции // ПолучитьВерсиюCom()

// Функция возвращает соединитель 1С:Предприятия
//
// Возвращаемое значение:
//  COMОбъект - соединитель 1С:предприятия (COMConnector)
//
Функция ПолучитьComСоединитель(ВерсияПлатформы = Неопределено) Экспорт
	
	ОтладкаВызовСервера.Информация("ПолучитьComСоединитель");
	ComСоединитель = Новый COMОбъект(ПолучитьВерсиюCom(ВерсияПлатформы) + ".COMConnector");
	ОтладкаВызовСервера.Информация("ПолучитьComСоединитель__Успешно");
	Возврат ComСоединитель;
	
КонецФункции // ПолучитьComСоединитель()

// Функция возвращает соединитель 1С:Предприятия
//
// Возвращаемое значение:
//  COMОбъект - соединитель 1С:предприятия (COMConnector)
//
Функция ПолучитьComСоединительПриложения() Экспорт
	
	ОтладкаВызовСервера.Информация("ПолучитьComСоединитель");
	ComСоединитель = Новый COMОбъект(ПолучитьВерсиюCom() + ".Application");
	ОтладкаВызовСервера.Информация("ПолучитьComСоединитель__Успешно");
	Возврат ComСоединитель;
	
КонецФункции // ПолучитьComСоединительПриложения()

// Устанавливает соединение с агентом сервера.
// Возвращаемое значение: COMОбъект, реализующий интерфейс IV8AgentConnection.
//
Функция ПолучитьСоединениеСАгентомСервера(КластерСсылка) Экспорт
	ВерсияПлатформы = КластерСсылка.ВерсияПлатформы;
	МенеджерСоединений = ПолучитьComСоединитель(ВерсияПлатформы);
	
	АдресАгентаСервера = КластерСсылка.АдресАгентаСервера;
	ПортАгентаСервера = КластерСсылка.ПортАгентаСервера;
	
	Попытка
		СоединениеСАгентомСервера = МенеджерСоединений.ConnectAgent(АдресАгентаСервера + ":" + ПортАгентаСервера);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ВызватьИсключение Ошибка.Причина.Описание + "." + Символы.ПС + НСтр("ru = 'Заполните поле ""Имя компьютера или IP адрес"" руками.'");
	КонецПопытки;
	
	Возврат СоединениеСАгентомСервера;
КонецФункции

//Устанавливает соединение с информационной базой 1С:Предприятия 8
//и возвращает структру подключения
Функция ПолучитьСоединениеСИнформационнойБазой(БазаДанныхСсылка)Экспорт
	
	СтруктураПодключения = Новый Структура("БазаДанныхСсылка, ИмяБазыВКластере, Connect, РезультатПодключения");
	
	Попытка
		МенеджерСоединений = ПолучитьComСоединитель(БазаДанныхСсылка.Кластер.ВерсияПлатформы);
		СтрокаПодключения = ПолучитьСтрокуПодключения(БазаДанныхСсылка);
		СтруктураПодключения.Connect = МенеджерСоединений.Connect(СтрокаПодключения);
		СтруктураПодключения.БазаДанныхСсылка = БазаДанныхСсылка;
		СтруктураПодключения.ИмяБазыВКластере = БазаДанныхСсылка.ИмяБазыВКластере;
		СтруктураПодключения.РезультатПодключения = "Успешно";
		////Помещаем соединение в структуру
	Исключение
		ПодробноеОписаниеОшибки = "Не удалось подключится к базе "+БазаДанныхСсылка.ИмяБазыВКластере +" Коннектор: "+ПолучитьВерсиюCom(БазаДанныхСсылка.Кластер.ВерсияПлатформы) + ".COMConnector"+ Символы.ПС + ОписаниеОшибки(); 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст  = ПодробноеОписаниеОшибки;
		Сообщение.Сообщить();
		СтруктураПодключения.РезультатПодключения = ПодробноеОписаниеОшибки;
		
	КонецПопытки;
	
	Возврат СтруктураПодключения;
	
КонецФункции

//Получить массив кластеров агента сервера 1с
Функция ПолучитьКластеры(АдресКластера, ПортАгентаКластера, ВерсияПлатформы) Экспорт
	
	МассивКластеров = Новый Массив;
	
	МенеджерСоединений = ПолучитьComСоединитель(ВерсияПлатформы);
	Попытка
		СоединениеСАгентомСервера = МенеджерСоединений.ConnectAgent(АдресКластера + ":" + Формат(ПортАгентаКластера, "ЧГ=0"));
		Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл
			СтруктураКластера = Новый Структура;
			Если ВерсияВЧисло(ВерсияПлатформы) > 8000300000000000 Тогда
				ИмяКластера = "ClusterName";
			Иначе
				ИмяКластера = "Name";
			КонецЕсли;
			СтруктураКластера.Вставить("ClusterName", Кластер[ИмяКластера]);
			СтруктураКластера.Вставить("MainPort", Кластер["MainPort"]);
			СтруктураКластера.Вставить("HostName", Кластер["HostName"]);
			
			МассивКластеров.Добавить(СтруктураКластера);
		КонецЦикла;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		Если Ошибка.Причина <> Неопределено Тогда
			ВызватьИсключение Ошибка.Причина.Описание + "." + НСтр("ru = 'Заполните поле ""Кластер"" руками.'");
		Иначе
			ВызватьИсключение Ошибка.Описание + "." + НСтр("ru = 'Заполните поле ""Кластер"" руками.'");
		КонецЕсли;
	КонецПопытки;
	
	Возврат МассивКластеров;
	
КонецФункции

//Получить кластер сервера приложений
Функция ПолучитьКластер(КластерСсылка, СоединениеСАгентомСервера)  Экспорт
	
	ПортКластера = КластерСсылка.ПортКластера;
	АдминистраторКластера = КластерСсылка.АдминистраторКластера;
	ПарольАдминистратораКластера = КластерСсылка.ПарольАдминистратораКластера;
	ВерсияПлатформы = КластерСсылка.ВерсияПлатформы;
	
	
	СписокКластеров = СоединениеСАгентомСервера.GetClusters();
	НужныйКластер = Неопределено;
	Для Каждого СтрокаКластер Из СписокКластеров Цикл
		//Если Кластер.ClusterName = КластерОбъектаКонтроля И Кластер.MainPort = ПортКластера  И Кластер.HostName = АдресКластера Тогда
		//Если Кластер.MainPort = ПортКластера  И ВРег(Кластер.HostName) = ВРег(АдресКластера) Тогда
		// Приняли решение, что нужный кластер ищется именно по порту,
		// т.к. соединение идет с сервером (не важно, как указан сервер - localhost, ip или доменное имя)
		// на одном сервере не может быть разных кластеров на одном и том же порту
		Если СтрокаКластер.MainPort = Число(ПортКластера) Тогда
			НужныйКластер = СтрокаКластер;
			СоединениеСАгентомСервера.Authenticate(НужныйКластер, АдминистраторКластера, ПарольАдминистратораКластера);
		
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НужныйКластер;
	
КонецФункции

// Устанавливает соединение с рабочим процессом.
Функция ПолучитьСоединениеСРабочимПроцессом(КластерСсылка, ТекущаяБаза, Процесс) Экспорт
	//ПолучитьСоединениеСРабочимПроцессом
	ВерсияПлатформы = КластерСсылка.ВерсияПлатформы;
	МенеджерСоединений = ПолучитьComСоединитель(ВерсияПлатформы);
	
	//АдресАгентаСервера = КластерСсылка.АдресАгентаСервера;
	ХостРабочегоПроцесса = Процесс.HostName;
	ПортРабочегоПроцесса = Процесс.MainPort;
	
	Попытка
		СоединениеСРабочимПроцессом = МенеджерСоединений.ConnectWorkingProcess(ХостРабочегоПроцесса + ":" + СтрЗаменить(ПортРабочегоПроцесса, Символы.НПП, ""));
		СоединениеСРабочимПроцессом.AddAuthentication(ТекущаяБаза.Пользователь, ТекущаяБаза.ПарольПользователя);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ВызватьИсключение Ошибка.Причина.Описание + "." + Символы.ПС + НСтр("ru = 'Заполните поле ""Имя компьютера или IP адрес"" руками.'");
	КонецПопытки;
	
	Возврат СоединениеСРабочимПроцессом;
	
КонецФункции

//Возвращает таблицу значений баз кластера, сопоставленную с уже загруженными базами из кластера
Функция ПолучитьБазыКластера(КластерСсылка) Экспорт
	
	БазыКластераТаблица = Новый ТаблицаЗначений;
	
	БазыКластераТаблица.Колонки.Добавить("Name",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100)));
	БазыКластераТаблица.Колонки.Добавить("Descr",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(100)));
	
	Попытка
		
		СоединениеСАгентомСервера = ПолучитьСоединениеСАгентомСервера(КластерСсылка);
		СоединениеСКластером = ПолучитьКластер(КластерСсылка, СоединениеСАгентомСервера); 
		
		БазыКластера = СоединениеСАгентомСервера.GetInfoBases(СоединениеСКластером);
		
		Для Каждого БазаКластера Из БазыКластера Цикл
			СтрокаБазыКластераТаблица = БазыКластераТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаБазыКластераТаблица,БазаКластера);
		КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазыКластераТаблица.Name,
		|	БазыКластераТаблица.Descr
		|ПОМЕСТИТЬ ВТБазыКластераТаблица
		|ИЗ
		|	&БазыКластераТаблица КАК БазыКластераТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка,
		|	ВТБазыКластераТаблица.Name,
		|	ВТБазыКластераТаблица.Descr
		|ИЗ
		|	ВТБазыКластераТаблица КАК ВТБазыКластераТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|		ПО ВТБазыКластераТаблица.Name = ИнформационныеБазы.ИмяБазыВКластере";
		
	Запрос.УстановитьПараметр("БазыКластераТаблица", БазыКластераТаблица);
	
	БазыКластераТаблица = Запрос.Выполнить().Выгрузить();
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий =
		"Описание = '" +Инфо.Описание + "', " +
		"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
		"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
		"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
		
		Сообщить(ОписаниеОшибки());
		
		ЗаписьЖурналаРегистрации(
		"Функция ПолучитьБазыКластера(ОбъектСсылка)",
		УровеньЖурналаРегистрации.Ошибка,
		,
		Комментарий);
		Сообщить(Комментарий);
	КонецПопытки;
	
	Возврат БазыКластераТаблица;
КонецФункции

//Получает информационную базу рабочего процесса.
//После авторизации в рабочем процессе, и последующем получении баз, мы можем редактировать все свойства этих баз
//Нужно в случаях к примеру включения и отключения баз, и установки блокировки начала сеансов
// Параметры:
Функция ПолучитьИБРабочегоПроцесса(СоединениеСРабочимПроцессом, Кластер, Знач ИмяВКластере, Знач ИмяАдминистратораИБ, Знач ПарольАдминистратораИБ)
	
	СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
	
	Для Каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
		
		Если ИнформационнаяБаза.Name = ИмяВКластере Тогда
			
			Если Не ЗначениеЗаполнено(ИнформационнаяБаза.DBMS) Тогда
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильные имя и пароль администратора информационной базы %1 в кластере серверов %2:%3 (имя: ""%4"").'"),
					ИмяВКластере,
					Кластер.HostName, 
					Кластер.MainPort,
					ИмяАдминистратораИБ);
				
			КонецЕсли;
			
			Возврат ИнформационнаяБаза;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не найдена информационная база ""%3""!'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"),
		ИмяВКластере);
	
КонецФункции

//Получает информационную базу кластера. 
//Возвращаемое значение базы содержит только 2 колонки - name и descr.
//Для получения всех свойств базы, нужно их получать через рабочий процесс
Функция ПолучитьИБКластера(СоединениеСАгентомСервера, СоединениеСКластером, ИмяВКластере) Экспорт
	
	НайденнаяБаза = Неопределено;
	
	Для Каждого ИнформационнаяБаза Из СоединениеСАгентомСервера.GetInfoBases(СоединениеСКластером) Цикл
		
		Если ВРег(ИнформационнаяБаза.Name) = ВРег(ИмяВКластере) Тогда
			НайденнаяБаза = ИнформационнаяБаза; 
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат НайденнаяБаза;
	
КонецФункции

Функция ВерсияПлатформы() Экспорт
	
	Инфо = Новый СистемнаяИнформация;
	ВерсияПлатформы = Инфо.ВерсияПриложения;
	
	Возврат ВерсияПлатформы;
	
КонецФункции // ВерсияПлатформы()

Функция ВерсияВЧисло(Версия) Экспорт
	Попытка
		Если НЕ ПустаяСтрока(Версия) Тогда
			ВерсияСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, ".");
			
			Возврат Число(ВерсияСтроки[0]) * 1000000000000000
			+ Число(ВерсияСтроки[1]) * 100000000000
			+ Число(ВерсияСтроки[2]) * 10000000
			+ Число(ВерсияСтроки[3]);
		Иначе
			Возврат 0;
		КонецЕсли;
	Исключение
		Возврат -1;
	КонецПопытки;
КонецФункции



#КонецОбласти     


