
//Структура параметров - Структура
//Состав структуры - "Массив баз", тип массив
Процедура ВыполнитьЗагрузкуПользователей(СтруктураПараметров, АдресРезультата = Неопределено) экспорт
	
	//При загрузке новых данных, существующие должны быть удалены, так как могут быть устаревшими и исказить текущее положение дел
	//Удаляем всех пользователей
	ВыборкаПользователи = Справочники.ВнешниеПользователи.Выбрать();
	Пока ВыборкаПользователи.Следующий() цикл
		ОбъектПользователя = ВыборкаПользователи.ПолучитьОбъект();
		ОбъектПользователя.Удалить();
	КонецЦикла;
	//Удаляем все профили доступа	
	ВыборкаПрофилиДоступа = Справочники.ПрофилиДоступа.Выбрать();
	Пока ВыборкаПрофилиДоступа.Следующий() цикл
		ОбъектПрфиля = ВыборкаПрофилиДоступа.ПолучитьОбъект();
		ОбъектПрфиля.Удалить();
	КонецЦикла;
	
	Для каждого СтрокаБаза из СтруктураПараметров.МассивБаз цикл 
		
		СтруктураПодключения = РаботаСПодключениямиCOM.ПолучитьСоединениеСИнформационнойБазой(СтрокаБаза);
		
		Если СтруктураПодключения.Connect = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = ПолучитьПользователейИПрофилиДоступа(СтруктураПодключения);
		
		ЗагрузитьВсеПрофилиCOMБазы(СтрокаБаза, СтруктураПодключения);
		
		//ПолучитьПользователей();
		//Производим поиск пользователя по имени в текущей базе и при необходимости создаем
		Для каждого ПользовательCOM из СтруктураДанных.тзПользователиCOM цикл
			НайденныйПользователь = Справочники.ВнешниеПользователи.НайтиПоНаименованию(ПользовательCOM.Наименование);
			
			Если НЕ ЗначениеЗаполнено(НайденныйПользователь) тогда
				//Создаем нового пользователя
				НовыйПользователь = Справочники.ВнешниеПользователи.СоздатьЭлемент();
				НовыйПользователь.Наименование = ПользовательCOM.Наименование;
				НовыйПользователь.Записать();
				НайденныйПользователь = НовыйПользователь.Ссылка;
			КонецЕсли;
			
			//ЗАПОЛНЯЕМ ТЧ СписокБазПользователя
			ОбъектПользователя = НайденныйПользователь.ПолучитьОбъект();
			СтрокаТЧБазаПользователя = ОбъектПользователя.СписокИнформационныхБаз.Добавить();
			СтрокаТЧБазаПользователя.ИнформационнаяБаза = СтруктураПодключения.БазаДанныхСсылка;
			СтрокаТЧБазаПользователя.Недействителен = ПользовательCOM.Недействителен; 
			СтрокаТЧБазаПользователя.ИдентификаторПользователяИБ = ПользовательCOM.ИдентификаторСтрока; 
			Если ПользовательCOM.СвойстваПользователяИБ.Получить() <> Неопределено Тогда
				СтрокаТЧБазаПользователя.ВходВПрограммуРазрешен = ПользовательCOM.СвойстваПользователяИБ.Получить().ВходВПрограммуРазрешен; 
			КонецЕсли;
			//если ПользовательИБCOM не найден, это значит что пользователь не действителен и удален из базы
			//Но по каким-то причина остался в справочнике "Пользователи"
			ПользовательИБCOM = СтруктураПодключения.Connect.ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательCOM.ИдентификаторПользователяИБ);
			Если ПользовательИБCOM = неопределено Тогда
				СтрокаТЧБазаПользователя.ИмяПользователя = "<Не найден пользователь ИБ>";
			Иначе
				СтрокаТЧБазаПользователя.ИмяПользователя = ПользовательИБCOM.Имя;
				СтрокаТЧБазаПользователя.СменаПароляПриВходе = Ложь; 
				СтрокаТЧБазаПользователя.ЗапрещеноИзменятьПароль = ПользовательИБCOM.ЗапрещеноИзменятьПароль;
				СтрокаТЧБазаПользователя.ПоказыватьВСпискеВыбора = ПользовательИБCOM.ПоказыватьВСпискеВыбора;
				СтрокаТЧБазаПользователя.СохраняемоеЗначениеПароля = ПользовательИБCOM.СохраняемоеЗначениеПароля;
			КонецЕсли;
			
			//ЗАПОЛНЯЕМ ТЧ ПрофилиДоступа
			//Ищем профили текущего пользователя COM в общей таблице профилей
			ПараметрыОтбора = СтруктураПодключения.Connect.NewObject("Структура");
			ПараметрыОтбора.Вставить("ПользовательНаименование", ПользовательCOM.Наименование);
			ПрофилиДоступаПользователяCOM = СтруктураДанных.тзПрофилиДоступаПользователейCOM.НайтиСтроки(ПараметрыОтбора);
			Если ПрофилиДоступаПользователяCOM <> неопределено Тогда
				//Добавляем в ТЧ все найденные профили пользователя
				Для каждого СтрокаПрофильДоступаCOM из ПрофилиДоступаПользователяCOM цикл
					//Ищем существующий или создаем новый
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПрофилиДоступа.Ссылка
					|ИЗ
					|	Справочник.ПрофилиДоступа КАК ПрофилиДоступа
					|ГДЕ
					|	ПрофилиДоступа.ИнформационнаяБаза = &ИнформационнаяБаза
					|	И ПрофилиДоступа.Наименование = &Наименование";
					
					Запрос.УстановитьПараметр("ИнформационнаяБаза", СтрокаБаза);
					Запрос.УстановитьПараметр("Наименование", СтрокаПрофильДоступаCOM.Профиль);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() тогда
						НайденныйПрофиль = Выборка.Ссылка;
					Иначе
						//Создаем новый профиль доступа
						НовыйПрофильДоступа = Справочники.ПрофилиДоступа.СоздатьЭлемент();
						НовыйПрофильДоступа.Наименование = СтрокаПрофильДоступаCOM.Профиль;
						НовыйПрофильДоступа.ИнформационнаяБаза = СтрокаБаза;
						НовыйПрофильДоступа.Записать();
						НайденныйПрофиль = НовыйПрофильДоступа.Ссылка;
					КонецЕсли;
					
					//Заполняем ТЧ
					СтрокаТЧПрофильДоступа = ОбъектПользователя.ПрофилиДоступа.Добавить();
					СтрокаТЧПрофильДоступа.Профиль = НайденныйПрофиль;
					СтрокаТЧПрофильДоступа.ИнформационнаяБаза = СтруктураПодключения.БазаДанныхСсылка; 
				КонецЦикла;
			КонецЕсли;
			
			//Записываем пользователя
			ОбъектПользователя.Записать();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеПользователейИПраваДоступа

Процедура ОбновлениеПользователей(СтруктураДанных, АдресРезультата=Неопределено)  Экспорт
	
	Объект = СтруктураДанных.Объект;
	
	Для каждого СтрокаБаза из Объект.СписокИнформационныхБаз цикл
		//ПРОВЕРКИ
		Если Не СтрокаБаза.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаБаза.ИдентификаторПользователяИБ = "00000000-0000-0000-0000-000000000000" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "У пользователя пустой идентификатор, поиск не может быть выполнен";
			Сообщение.Сообщить();
			продолжить;
		КонецЕсли;
		СтруктураПодключения = РаботаСПодключениямиCOM.ПолучитьСоединениеСИнформационнойБазой(СтрокаБаза.ИнформационнаяБаза);
		
		Если СтруктураПодключения.Connect = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Поиск текущего пользователя в БД
		Запрос = СтруктураПодключения.Connect.NewObject("Запрос");
		Запрос.Текст = 			
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Пользователи.ИдентификаторПользователяИБ) КАК ИдентификаторСтрока,
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Служебный = ЛОЖЬ";
		
		тзПользователи = Запрос.Выполнить().Выгрузить();
		//Находим существующего или создаем нового
		НайденныйПользователь = тзПользователи.Найти(СтрокаБаза.ИдентификаторПользователяИБ, "ИдентификаторСтрока");
		Если НайденныйПользователь = Неопределено Тогда
			//Не создаем пользователя если стоит отметка недействителен
			Если СтрокаБаза.Недействителен = Ложь Тогда
				ПользовательCOM = СтруктураПодключения.Connect.Справочники.Пользователи.СоздатьЭлемент();
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			ПользовательCOM = НайденныйПользователь.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		//Указываем наименование (оно же полное имя)
		ПользовательCOM.Наименование =  Объект.Наименование;  //
		
		//Если пользователя помечаем как недействительного, то продолжать дальнейшее выполнение цикла нет смысла
		Если СтрокаБаза.Недействителен Тогда
			ПользовательCOM.Недействителен = Истина;
			ПользовательCOM.Записать();
			Продолжить;
		КонецЕсли;
		
		//Описываем структуру параметров пользователя 
		
		ОписаниеПользователяИБ  = СтруктураПодключения.Connect.NewObject("Структура");
		ОписаниеПользователяИБ.Вставить("АутентификацияOpenID"           , Ложь);
		ОписаниеПользователяИБ.Вставить("АутентификацияОС"               , Ложь);
		ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная"      , Истина);
		ОписаниеПользователяИБ.Вставить("ПользовательОС"                 , "");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен"         , СтрокаБаза.ВходВПрограммуРазрешен);
		ОписаниеПользователяИБ.Вставить("Действие"                       , "Записать");
		ОписаниеПользователяИБ.Вставить("ЗапрещеноИзменятьПароль"        , СтрокаБаза.ЗапрещеноИзменятьПароль);
		ОписаниеПользователяИБ.Вставить("Имя"                            , СтрокаБаза.ИмяПользователя);
		ОписаниеПользователяИБ.Вставить("ОсновнойИнтерфейс"              , "");
		//Пароли пока не трогаем
		//ОписаниеПользователяИБ.Вставить("Пароль"                         , ПользовательИБПароль);
		//ОписаниеПользователяИБ.Вставить("ПарольУстановлен"               , Ложь);
		//ОписаниеПользователяИБ.Вставить("ПарольУстановлен"               , ?(СтрокаБаза.СменаПароляПриВходе, Ложь, Истина));
		ОписаниеПользователяИБ.Вставить("ПоказыватьВСпискеВыбора"        , СтрокаБаза.ПоказыватьВСпискеВыбора);
		ОписаниеПользователяИБ.Вставить("ПолноеИмя"                      , Объект.Наименование);
		ОписаниеПользователяИБ.Вставить("РежимЗапуска"                   , "Авто");
		ОписаниеПользователяИБ.Вставить("Роли"                           , Неопределено);
		ОписаниеПользователяИБ.Вставить("СохраняемоеЗначениеПароля"      , СтрокаБаза.СохраняемоеЗначениеПароля);
		ОписаниеПользователяИБ.Вставить("СтарыйПароль"                   , Неопределено);
		ОписаниеПользователяИБ.Вставить("Язык"                           , "Русский");
		
		ПользовательCOM.AdditionalProperties.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);	
		Попытка
			ПользовательCOM.Записать();
			//Сразу записываем идентификатор нового пользователя
			СтрокаБаза.ИдентификаторПользователяИБ = ПользовательCOM.ИдентификаторПользователяИБ; 

			ПользовательCOMСсылка = ПользовательCOM.Ссылка;
			Если Найти(СтрокаБаза.ИнформационнаяБаза.Наименование, "Бухгалтерия") Тогда
				ИзменениеПраваДоступаПользователяВПерсональныхГруппахДоступа(Объект, СтруктураПодключения.Connect, СтрокаБаза.ИнформационнаяБаза, ПользовательCOMСсылка);
			ИначеЕсли Найти(СтрокаБаза.ИнформационнаяБаза.Наименование, "ЗУП") ИЛИ Найти(СтрокаБаза.ИнформационнаяБаза.Наименование, "ZUP") Тогда
				ИзменениеПраваДоступаПользователяВГруппахДоступа(Объект, СтруктураПодключения.Connect, СтрокаБаза.ИнформационнаяБаза, ПользовательCOMСсылка);
			Иначе
				Сообщить("Для базы данных "+СтрокаБаза.ИнформационнаяБаза.Наименование+ " не определено какой тип групп доступа используется");
				Возврат
			КонецЕсли;
			ОписаниеМенеджера = Новый Структура("СменаПароляПриВходе", СтрокаБаза.СменаПароляПриВходе);
			УстановитьСвойстваВРегистрах(СтруктураПодключения.Connect,ПользовательCOMСсылка,ОписаниеМенеджера);
		Исключение
			Сообщить("База: "+СтрокаБаза.ИнформационнаяБаза);
			Сообщить("Описание ошибки: "+Символы.ПС+ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Сообщить("Операция успешно завершена");
	
	//Объект.Записать();
	
КонецПроцедуры

//Для бухгалтерских баз, в которых по умолчанию включены персональные группы доступа
Процедура ИзменениеПраваДоступаПользователяВПерсональныхГруппахДоступа(Объект, Connect, ИмяБазыДанных, ПользовательCOMСсылка)
	
	МассивПрофилей = Connect.NewObject("Массив");
	ПараметрыОтбора = Новый Структура ("ИнформационнаяБаза", ИмяБазыДанных);
	ПрофилиДоступаТекущегоПользователя = Объект.ПрофилиДоступа.НайтиСтроки(ПараметрыОтбора);
	Для каждого СтрокаПрофилиДоступа из ПрофилиДоступаТекущегоПользователя цикл
		СсылкаНаПрофиль =  Connect.Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(СтрокаПрофилиДоступа.Профиль.Наименование);
		Если СсылкаНаПрофиль = Connect.Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
			Сообщить("Выбранный профиль "+СтрокаПрофилиДоступа.Профиль+", не найден  в указанной базе "+ИмяБазыДанных );
			Возврат;
		Иначе
			МассивПрофилей.Добавить(СсылкаНаПрофиль);
		КонецЕсли;	
	КонецЦикла;
	
	// Получение списка изменений.
	Запрос = Connect.NewObject("Запрос");
	
	Запрос.УстановитьПараметр("Пользователь", ПользовательCOMСсылка);
	Запрос.УстановитьПараметр("МассивПрофилей", МассивПрофилей);
	
	//Запрос возвращает все профили указанные в массиве профилей и персональные группы доступа пользователя
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка КАК Профиль,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	Профили.Наименование КАК ПрофильНаименование,
	|	ВЫБОР
	|		КОГДА Профили.Ссылка В (&МассивПрофилей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (НЕ(ГруппыДоступа.Пользователь <> &Пользователь
	|					И НЕ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))))
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления";
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			//Если уже есть персональная группа доступа, то работаем с ней, иначе создаем новую.
			Если Выборка.ПерсональнаяГруппаДоступа <> Неопределено Тогда
				ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
			Иначе
				// Создание персональной группы доступа. Создаем только в случае отметки "Истина"
				Если Выборка.Отметка = Ложь тогда
					Продолжить;
				КонецЕсли;
				ГруппаДоступаОбъект = Connect.Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступаОбъект.Родитель     = Connect.Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
				ГруппаДоступаОбъект.Наименование = Выборка.ПрофильНаименование;
				ГруппаДоступаОбъект.Пользователь = ПользовательCOMСсылка;
				ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
			КонецЕсли;
			
			//Для профиля "Администратор" есть специальная предопределенная группа доступа "Администратор	
			Если Выборка.Профиль.Наименование = "Администратор" Тогда 
				//Делаем проверку, если мы включаем профиль, то добавляем в группу доступа пользователя, иначе убираем из группы пользователя
				Если Выборка.Отметка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(ПользовательCOMСсылка, "Пользователь") = Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = ПользовательCOMСсылка;
					КонецЕсли;
				Иначе
					//Профиль администратор должен быть хотя бы у одного пользователя
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(ПользовательCOMСсылка, "Пользователь");
					Если ОписаниеПользователя <> Неопределено Тогда
						Если  ГруппаДоступаОбъект.Пользователи.Количество() =1 Тогда
							ВызватьИсключение
							НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
							|которому разрешен вход в программу.'");
						Иначе
							ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//Остальные профили	
			Иначе
				//Поскольку группа персональная, мы можем спокойно очистить табличные части группы. В них всегда присутствует только один (наш) пользователь
				ГруппаДоступаОбъект.Пользователи.Очистить();
				ГруппаДоступаОбъект.ВидыДоступа.Очистить();
				Если Выборка.Отметка Тогда
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = ПользовательCOMСсылка;
					//В СЛУЧАЕ ИСПОЛЬЗОВАНИЯ RLS СЛЕДУЕТ КОНТРОЛИРОВАТЬ ЭТУ НАСТРОЙКУ!!!!!!!!!!!!!
					ГруппаДоступаОбъект.ВидыДоступа.Добавить().ВсеРазрешены=Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ГруппаДоступаОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

//Для баз ЗУП 3. В которых не используются персональные группы доступа
Процедура ИзменениеПраваДоступаПользователяВГруппахДоступа(Объект, Connect, ИмяБазыДанных, ПользовательCOMСсылка)
	
	МассивПрофилей = Connect.NewObject("Массив");
	ПараметрыОтбора = Новый Структура ("ИнформационнаяБаза", ИмяБазыДанных);
	ПрофилиДоступаТекущегоПользователя = Объект.ПрофилиДоступа.НайтиСтроки(ПараметрыОтбора);
	Для каждого СтрокаПрофилиДоступа из ПрофилиДоступаТекущегоПользователя цикл
		СсылкаНаПрофиль =  Connect.Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(СтрокаПрофилиДоступа.Профиль.Наименование);
		Если СсылкаНаПрофиль = Connect.Справочники.ПрофилиГруппДоступа.ПустаяСсылка() Тогда
			Сообщить("Выбранный профиль "+СтрокаПрофилиДоступа.Профиль+", не найден  в указанной базе "+ИмяБазыДанных );
			Возврат;
		Иначе
			МассивПрофилей.Добавить(СсылкаНаПрофиль);
		КонецЕсли;	
	КонецЦикла;
	
	// Получение списка изменений.
	Запрос = Connect.NewObject("Запрос");
	
	Запрос.УстановитьПараметр("Пользователь", ПользовательCOMСсылка);
	Запрос.УстановитьПараметр("МассивПрофилей", МассивПрофилей);
	
	//Запрос возвращает все профили указанные в массиве профилей и персональные группы доступа пользователя
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка КАК ГруппаДоступа,
	|	ГруппыДоступа.Наименование КАК Наименование,
	|	ГруппыДоступа.Профиль.Наименование КАК ПрофильНаименование,
	|	ГруппыДоступа.Описание КАК Описание,
	|	ГруппыДоступа.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ГруппыДоступа.Профиль В (&МассивПрофилей)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка
	|ПОМЕСТИТЬ ВТГруппыДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	НЕ ГруппыДоступа.ПометкаУдаления
	|	И НЕ ГруппыДоступа.Профиль.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПользователиГруппДоступа.Пользователь = &Пользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПользовательВГруппе,
	|	ПользователиГруппДоступа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ПользователиГруппДоступа
	|ГДЕ
	|	ПользователиГруппДоступа.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТГруппыДоступа.ГруппаДоступа
	|			ИЗ
	|				ВТГруппыДоступа)
	|	И ПользователиГруппДоступа.Пользователь В
	|			(ВЫБРАТЬ
	|				СоставыГруппПользователей.ГруппаПользователей
	|			ИЗ
	|				РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|			ГДЕ
	|				СоставыГруппПользователей.Пользователь = &Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГруппыДоступа.ГруппаДоступа КАК ГруппаДоступа,
	|	ВТГруппыДоступа.Наименование КАК Наименование,
	|	ВТГруппыДоступа.ПрофильНаименование КАК ПрофильНаименование,
	|	ВТГруппыДоступа.Описание КАК Описание,
	|	ВТГруппыДоступа.Ответственный КАК Ответственный,
	|	ВТГруппыДоступа.Отметка КАК Отметка,
	|	ВТГруппыДоступаПользователя.ПользовательВГруппе КАК ПользовательВГруппе
	|ИЗ
	|	ВТГруппыДоступа КАК ВТГруппыДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГруппыДоступаПользователя КАК ВТГруппыДоступаПользователя
	|		ПО (ВТГруппыДоступа.ГруппаДоступа = ВТГруппыДоступаПользователя.Ссылка)";
	
	
	ГруппаИзменена = Ложь;
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ГруппаДоступаОбъект = Выборка.ГруппаДоступа.ПолучитьОбъект();
			
			//Для профиля "Администратор" есть специальная предопределенная группа доступа "Администратор	
			Если Выборка.ПрофильНаименование = "Администратор" Тогда 
				//Делаем проверку, если мы включаем профиль, то добавляем в группу доступа пользователя, иначе убираем из группы пользователя
				Если Выборка.Отметка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(ПользовательCOMСсылка, "Пользователь") = Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = ПользовательCOMСсылка;
						ГруппаИзменена = Истина;
					КонецЕсли;
				Иначе
					//Профиль администратор должен быть хотя бы у одного пользователя
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(ПользовательCOMСсылка, "Пользователь");
					Если ОписаниеПользователя <> Неопределено Тогда
						Если  ГруппаДоступаОбъект.Пользователи.Количество() =1 Тогда
							ВызватьИсключение
							НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
							|которому разрешен вход в программу.'");
						Иначе
							ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
							ГруппаИзменена = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//Остальные профили	
			Иначе
				
				Если Выборка.Отметка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(ПользовательCOMСсылка, "Пользователь") = Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = ПользовательCOMСсылка;
						ГруппаИзменена = Истина;
					КонецЕсли;
				Иначе
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(ПользовательCOMСсылка, "Пользователь");
					Если ОписаниеПользователя <> Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						ГруппаИзменена = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ГруппаИзменена тогда
				ГруппаДоступаОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСвойстваВРегистрах(Connect,ПользовательCOMСсылка,ОписаниеМенеджера)
	
	МенеджерЗаписи              = Connect.РегистрыСведений.СведенияОПользователях.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ПользовательCOMСсылка;
	МенеджерЗаписи.Прочитать();
	
	Если ОписаниеМенеджера.Свойство("СменаПароляПриВходе") Тогда
		МенеджерЗаписи.Пользователь = ПользовательCOMСсылка;
		МенеджерЗаписи.ПотребоватьСменуПароляПриВходе = ОписаниеМенеджера.СменаПароляПриВходе;
		МенеджерЗаписи.Записать();	
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПользователейИПрофилиДоступа(СтруктураПодключения)
	
	СтруктураДанных = Новый Структура("тзПользователиCOM, тзПрофилиДоступаПользователейCOM");
	
	//Получаем список пользователей базы и их профилей доступа
	Запрос = СтруктураПодключения.Connect.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Наименование,
	|	Пользователи.Недействителен,
	|	Пользователи.ИдентификаторПользователяИБ,
	|	ПРЕДСТАВЛЕНИЕ(Пользователи.ИдентификаторПользователяИБ) КАК ИдентификаторСтрока,
	|	Пользователи.СвойстваПользователяИБ,
	|	Пользователи.Ссылка
	|ПОМЕСТИТЬ ВТПользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Служебный = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПользователи.Наименование,
	|	ВТПользователи.Недействителен,
	|	ВТПользователи.ИдентификаторПользователяИБ,
	|	ВТПользователи.ИдентификаторСтрока,
	|	ВТПользователи.СвойстваПользователяИБ
	|ИЗ
	|	ВТПользователи КАК ВТПользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступа.Профиль.Представление КАК Профиль,
	|	ВЫБОР
	|		КОГДА ГруппыДоступа.Родитель.Наименование = ""Персональная группа доступа""
	|			ТОГДА ГруппыДоступа.Пользователь
	|		ИНАЧЕ ГруппыДоступаПользователи.Пользователь
	|	КОНЕЦ КАК Пользователь
	|ПОМЕСТИТЬ ВТПрофилиДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПрофилиДоступа.Профиль,
	|	ПРЕДСТАВЛЕНИЕ(ВТПрофилиДоступа.Пользователь) КАК ПользовательНаименование
	|ИЗ
	|	ВТПрофилиДоступа КАК ВТПрофилиДоступа
	|ГДЕ
	|	ВТПрофилиДоступа.Пользователь В
	|			(ВЫБРАТЬ
	|				ВТПользователи.Ссылка
	|			ИЗ
	|				ВТПользователи)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДанных.тзПользователиCOM = МассивРезультатов.Получить(1).Выгрузить();
	СтруктураДанных.тзПрофилиДоступаПользователейCOM = МассивРезультатов.Получить(3).Выгрузить();
		
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ЗагрузитьВсеПрофилиCOMБазы(СтрокаБаза, СтруктураПодключения)
	
	Запрос = СтруктураПодключения.Connect.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|ПрофилиГруппДоступа.Наименование
	|ИЗ
	|Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа";
	
	тзВсеПрофилиДоступа = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаПрофильCOMБазы из тзВсеПрофилиДоступа цикл
		//Создаем новый профиль доступа
		НовыйПрофильДоступа = Справочники.ПрофилиДоступа.СоздатьЭлемент();
		НовыйПрофильДоступа.Наименование = СтрокаПрофильCOMБазы.Наименование;
		НовыйПрофильДоступа.ИнформационнаяБаза = СтрокаБаза;
		НовыйПрофильДоступа.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Формирует сообщение о результатах переноса пользователя.
//
// Параметры:
//  МассивПользователей - Массив - пользователи, которых нужно перенести в новую группу.
//  ГруппаПриемник      - СправочникСсылка.ГруппыПользователей - группа, в которую переносятся
//                        пользователи.
//  Перемещение         - Булево - если Истина, то пользователь удаляется из старой группы.
//  МассивНеПеремещенныхПользователей - Массив - пользователи, которых не удалось переместить в группу.
//  ГруппаИсточник      - СправочникСсылка.ГруппыПользователей - группа, из которой происходит
//                        перенос пользователей.
//
// ВозвращаемоеЗначение:
//  Строка - Сообщение пользователю.
//
Функция ФормированиеСообщенияПользователю(МассивПользователей, ГруппаПриемник,
	                                      Перемещение, МассивНеПеремещенныхПользователей, ГруппаИсточник = Неопределено) Экспорт
	
	КоличествоПользователей = МассивПользователей.Количество();
	НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаПриемник, "Наименование");
	СообщениеПользователю = Неопределено;
	КоличествоНеПеремещенныхПользователей = МассивНеПеремещенныхПользователей.Количество();
	
	УведомлениеПользователя = Новый Структура;
	УведомлениеПользователя.Вставить("Сообщение");
	УведомлениеПользователя.Вставить("ЕстьОшибки");
	УведомлениеПользователя.Вставить("Пользователи");
	
	Если КоличествоНеПеремещенныхПользователей > 0 Тогда
		
		СвойстваГруппыПриемника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГруппаПриемник, "Назначение, Наименование");
		
		НаименованиеГруппы = СвойстваГруппыПриемника.Наименование;
		НазначениеГруппыВнешнихПользователей = СвойстваГруппыПриемника.Назначение.Выгрузить();
		
		МассивПредставлений = Новый Массив;
		Для Каждого СтрокаНазначения Из НазначениеГруппыВнешнихПользователей Цикл
			
			МассивПредставлений.Добавить(НРег(Метаданные.НайтиПоТипу(
				ТипЗнч(СтрокаНазначения.ТипПользователей)).Синоним));
			
		КонецЦикла;
		
		ПредставлениеТипаОбъектаАвторизации = СтрСоединить(МассивПредставлений, ", ");
		
		Если КоличествоНеПеремещенныхПользователей = 1 Тогда
			
			СвойстваНеПеремещенногоПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				МассивНеПеремещенныхПользователей[0], "Наименование, ОбъектАвторизации");
			
			Предмет = СвойстваНеПеремещенногоПользователя.Наименование;
			
			ТипВнешнегоПользователя = ТипЗнч(СвойстваНеПеремещенногоПользователя.ОбъектАвторизации);
			ОписаниеТипаСсылки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипВнешнегоПользователя));
			Значение = ОписаниеТипаСсылки.ПривестиЗначение(Неопределено);
		
			Отбор = Новый Структура("ТипПользователей", Значение);
			ТипПользователяСовпадаетСГруппой = (НазначениеГруппыВнешнихПользователей.НайтиСтроки(Отбор).Количество() = 1);
			
			УведомлениеПользователя.Пользователи = Неопределено;
			
			Если ТипПользователяСовпадаетСГруппой Тогда
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. у группы стоит признак ""Все пользователи заданного типа"".'"),
					Предмет, НаименованиеГруппы) + Символы.ПС;
			Иначе
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пользователь ""%1"" не может быть включен в группу ""%2"",
					           |т.к. в состав ее участников входят только %3.'"),
					Предмет, НаименованиеГруппы, ПредставлениеТипаОбъектаАвторизации) + Символы.ПС;
			КонецЕсли;
		Иначе
			УведомлениеПользователя.Пользователи = СтрСоединить(МассивНеПеремещенныхПользователей, Символы.ПС);
			
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не все пользователи могут быть включены в группу ""%1"",
				           |т.к. в состав ее участников входят только %2
				           |или у группы стоит признак ""Все пользователи заданного типа"".'"),
				НаименованиеГруппы,
				ПредставлениеТипаОбъектаАвторизации);
		КонецЕсли;
		
		УведомлениеПользователя.Сообщение = СообщениеПользователю;
		УведомлениеПользователя.ЕстьОшибки = Истина;
		
		Возврат УведомлениеПользователя;
	КонецЕсли;
	
	Если КоличествоПользователей = 1 Тогда
		
		СтрокаОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивПользователей[0], "Наименование");
		
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи
		 Или ГруппаПриемник = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			СтрокаДействие = НСтр("ru = 'исключен из группы'");
			НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
			
		ИначеЕсли Перемещение Тогда
			СтрокаДействие = НСтр("ru = 'перемещен в группу'");
		Иначе
			СтрокаДействие = НСтр("ru = 'включен в группу'");
		КонецЕсли;
		
		СообщениеПользователю = НСтр("ru = '""%1"" %2 ""%3""'");
		
	ИначеЕсли КоличествоПользователей > 1 Тогда
		
		СтрокаОбъект = Формат(КоличествоПользователей, "ЧДЦ=0") + " "
			+ ПредметЦелогоЧисла(КоличествоПользователей,
				"Л = ru_RU", НСтр("ru = 'пользователь,пользователя,пользователей,,,,,,0'"));
		
		Если ГруппаПриемник = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			СтрокаДействие = НСтр("ru = 'исключены из группы'");
			НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаИсточник, "Наименование");
			
		ИначеЕсли Перемещение Тогда
			СтрокаДействие = НСтр("ru = 'перемещены в группу'");
		Иначе
			СтрокаДействие = НСтр("ru = 'включены в группу'");
		КонецЕсли;
		СообщениеПользователю = НСтр("ru = '%1 %2 ""%3""'");
	КонецЕсли;
	
	Если СообщениеПользователю <> Неопределено Тогда
		СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю,
			СтрокаОбъект, СтрокаДействие, НаименованиеГруппы);
	КонецЕсли;
	
	УведомлениеПользователя.Сообщение = СообщениеПользователю;
	УведомлениеПользователя.ЕстьОшибки = Ложь;
	
	Возврат УведомлениеПользователя;
	
КонецФункции

// Возвращает строки вида "день", "дня", "дней".
//
// Параметры:
//   Число                       - Число  - целое число, к которому нужно добавить предмет исчисления.
//   ФорматнаяСтрока             - Строка - см. одноименный параметр метода ЧислоПрописью,
//                                          например: "Л = ru_RU".
//   ПараметрыПредметаИсчисления - Строка - см. одноименный параметр метода ЧислоПрописью,
//                                          например: НСтр("ru = 'день,дня,дней,,,,,,0'").
//
//  Возвращаемое значение:
//   Строка.
//
Функция ПредметЦелогоЧисла(Число, ФорматнаяСтрока, ПараметрыПредметаИсчисления) Экспорт
	
	ЦелоеЧисло = Цел(Число);
	
	ПрописьЧисла = ЧислоПрописью(ЦелоеЧисло, ФорматнаяСтрока, НСтр("ru = ',,,,,,,,0'"));
	
	ПрописьЧислаИПредмета = ЧислоПрописью(ЦелоеЧисло, ФорматнаяСтрока, ПараметрыПредметаИсчисления);
	
	Возврат СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, "");
	
КонецФункции

#КонецОбласти
